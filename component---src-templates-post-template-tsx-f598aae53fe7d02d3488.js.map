{"version":3,"sources":["webpack:///./src/components/organisms/blogPage/blogMeta.tsx","webpack:///./src/components/organisms/blogPage/index.tsx","webpack:///./src/templates/post-template.tsx"],"names":["Title","paddingTop","rhythm","fontSize","scale","lineHeight","fontWeight","marginBottom","responsive","tablet","minWidth","Date","textAlign","color","margin","Tags","marginLeft","alignSelf","Description","Info","display","BlogMeta","title","date","tags","description","map","tag","key","Container","paddingBottom","width","Html","h2","h3","li","ul","listStyle","listStylePosition","ol","tr","BlogPage","props","url","slug","shareTitle","fileName","thumbnail","alt","html","toc","dangerouslySetInnerHTML","__html","Post","data","fm","markdown","frontmatter","site","siteMetadata","siteUrl","imageUrl","publicURL","isPostPage","name"],"mappings":"yNA+BMA,EAAQ,4CACZC,WAAYC,YAAO,GACnBC,SAAUC,YAAM,GAAGD,SACnBE,WAAYH,YAAO,GACnBI,WAAY,OACZC,aAAc,IALF,sBAMWC,IAAWC,OAAOC,SAN7B,OAM6C,CACvDT,WAAYC,YAAO,GACnBC,SAAUC,YAAM,KAAOD,SACvBE,WAAYD,YAAM,KAAOC,YATf,OAaRM,EAAO,uCAAU,CACrBR,SAAUC,YAAM,GAAGD,SACnBE,WAAYH,YAAO,GACnBU,UAAW,SACXC,MAAO,UACPC,OAAQ,QALG,IAQPC,EAAO,wCAAW,CACtBC,WAAYd,YAAO,IACnBG,WAAYH,YAAO,GACnBe,UAAW,UAHA,IAMPC,EAAc,sCAAS,CAC3Bf,SAAaC,YAAM,GAAGD,SAAd,cACRE,WAAeD,YAAM,GAAGC,WAAd,cACVS,OAAQ,gBAHU,IAMdK,EAAO,wCAAW,CACtBC,QAAS,OACTnB,WAAYC,YAAO,EAAI,IAFZ,IAKEmB,EAvDmB,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,YAArB,OAChC,4BACE,YAACzB,EAAD,KAAQsB,GACR,YAACH,EAAD,KACE,uBACE,YAAC,EAAD,KAAOI,IAET,YAACR,EAAD,KACGS,EAAKE,KAAI,SAACC,GAAD,OACR,YAAC,IAAD,CAAKC,IAAKD,GAAMA,QAItB,YAACT,EAAD,KAAcO,KC0BZI,EAAY,6CAChBC,cAAe5B,YAAO,GACtBY,OAAQ,KAAKZ,YAAO,KAFJ,sBAGOM,IAAWC,OAAOC,SAHzB,OAGyC,CACvDqB,MAAO,MACPjB,OAAQ,UALM,OASZkB,EAAO,6CACXF,cAAe5B,YAAO,GACtB+B,GAAI,CACF3B,WAAY,OACZH,SAAUC,YAAM,IAAOD,SACvBE,WAAYH,YAAO,GACnBY,OAAWZ,YAAO,KAAZ,MAERgC,GAAI,CACF5B,WAAY,OACZH,SAAUC,YAAM,EAAI,GAAGD,SACvBE,WAAYH,YAAO,GACnBY,OAAWZ,YAAO,GAAZ,MAERiC,GAAI,CACFhC,SAAUC,YAAM,GAAGD,SACnBE,WAAYH,YAAO,IAErBkC,GAAI,CACFC,UAAW,OACXC,kBAAmB,UAErBC,GAAI,CACFD,kBAAmB,UAErBE,GAAI,CACFrC,SAAUC,YAAM,GAAGD,SACnBE,WAAYH,YAAO,MA3BV,sBA6BYM,IAAWC,OAAOC,SA7B9B,OA6B8C,CACvDyB,GAAI,CACF9B,WAAYH,YAAO,MAErBsC,GAAI,CACFnC,WAAYH,YAAO,OAlCZ,OAuCEuC,EA3EmB,SAACC,GACjC,IAAMC,EAAM,gCAAgCD,EAAME,KAC5CC,EAAgBH,EAAMpB,MAAZ,mBAEhB,OACE,4BACE,YAACO,EAAD,KACE,YAAC,EAAD,CACEP,MAAOoB,EAAMpB,MACbC,KAAMmB,EAAMnB,KACZE,YAAaiB,EAAMjB,YACnBD,KAAMkB,EAAMlB,OAEd,YAAC,IAAD,MACA,YAAC,IAAD,CAAOsB,SAAUJ,EAAMK,UAAWC,IAAI,cACtC,YAAC,IAAD,CAAcL,IAAKA,EAAKrB,MAAOuB,IAC/B,YAAC,IAAD,CAAKI,KAAMP,EAAMQ,MACjB,YAAC,IAAD,MACA,YAAClB,EAAD,CAAMmB,wBAAyB,CAACC,OAAQV,EAAMO,QAC9C,YAAC,IAAD,CAAcN,IAAKA,EAAKrB,MAAOuB,IAC/B,YAAC,IAAD,OAEF,YAAC,IAAD,QCoBSQ,UAvDe,SAAC,GAAW,IAAVC,EAAU,EAAVA,KACxBC,EAAKD,EAAKE,SAASC,YACnBd,EAAM,GAAGW,EAAKI,KAAKC,aAAaC,QAAUL,EAAGX,KAC7CiB,EAAW,GAAGP,EAAKI,KAAKC,aAAaC,QAAUL,EAAGR,UAAUe,UAElE,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEC,YAAU,EACVzC,MAAOiC,EAAGjC,MACVG,YAAa8B,EAAG9B,YAChBkB,IAAKA,EACLkB,SAAUA,IAEZ,YAAC,IAAD,KACE,YAAC,EAAD,CACEvC,MAAOiC,EAAGjC,MACVC,KAAMgC,EAAGhC,KACTE,YAAa8B,EAAG9B,YAChBmB,KAAMW,EAAGX,KACTG,UAAWQ,EAAGR,UAAUiB,KACxBxC,KAAM+B,EAAG/B,KACTyB,KAAMK,EAAKE,SAASP,KACpBC,IAAKI,EAAKE,SAASN","file":"component---src-templates-post-template-tsx-f598aae53fe7d02d3488.js","sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\n\nimport {Tag} from '../../atoms'\nimport {rhythm, scale} from '../../../utils/typography'\nimport {responsive} from '../../../../config'\n\ntype Props = {\n  title: string\n  date: string\n  tags: string[]\n  description: string\n}\n\nconst BlogMeta: React.FC<Props> = ({title, date, tags, description}) => (\n  <>\n    <Title>{title}</Title>\n    <Info>\n      <div>\n        <Date>{date}</Date>\n      </div>\n      <Tags>\n        {tags.map((tag) => (\n          <Tag key={tag}>{tag}</Tag>\n        ))}\n      </Tags>\n    </Info>\n    <Description>{description}</Description>\n  </>\n)\n\nconst Title = styled.h1({\n  paddingTop: rhythm(2),\n  fontSize: scale(1).fontSize,\n  lineHeight: rhythm(2),\n  fontWeight: 'bold',\n  marginBottom: 0,\n  [`@media (min-width: ${responsive.tablet.minWidth}px)`]: {\n    paddingTop: rhythm(4),\n    fontSize: scale(3 / 2).fontSize,\n    lineHeight: scale(3 / 2).lineHeight,\n  },\n})\n\nconst Date = styled.h4({\n  fontSize: scale(0).fontSize,\n  lineHeight: rhythm(2),\n  textAlign: 'center',\n  color: '#4b5454',\n  margin: 'auto',\n})\n\nconst Tags = styled.div({\n  marginLeft: rhythm(1 / 2),\n  lineHeight: rhythm(1),\n  alignSelf: 'center',\n})\n\nconst Description = styled.p({\n  fontSize: `${scale(0).fontSize} !important`,\n  lineHeight: `${scale(0).lineHeight} !important`,\n  margin: '0 !important',\n})\n\nconst Info = styled.div({\n  display: 'flex',\n  paddingTop: rhythm(1 / 4),\n})\n\nexport default BlogMeta\n","import * as React from 'react'\nimport styled from '@emotion/styled'\n\nimport {\n  Adsense,\n  Image,\n  Divider,\n  ShareButtons,\n  Toc,\n  Copyright,\n} from '../../atoms'\nimport BlogMeta from './blogMeta'\nimport {rhythm, scale} from '../../../utils/typography'\nimport {responsive} from '../../../../config'\n\ntype Props = {\n  title: string\n  slug: string\n  date: string\n  description: string\n  tags: string[]\n  thumbnail: string\n  html: string\n  toc: string\n}\n\nconst BlogPage: React.FC<Props> = (props) => {\n  const url = `https://www.takigawa-memo.com${props.slug}`\n  const shareTitle = `${props.title} - TAKIGAWA MEMO`\n\n  return (\n    <>\n      <Container>\n        <BlogMeta\n          title={props.title}\n          date={props.date}\n          description={props.description}\n          tags={props.tags}\n        />\n        <Divider />\n        <Image fileName={props.thumbnail} alt=\"thumbnail\" />\n        <ShareButtons url={url} title={shareTitle} />\n        <Toc html={props.toc} />\n        <Adsense />\n        <Html dangerouslySetInnerHTML={{__html: props.html}} />\n        <ShareButtons url={url} title={shareTitle} />\n        <Adsense />\n      </Container>\n      <Copyright />\n    </>\n  )\n}\n\nconst Container = styled.div({\n  paddingBottom: rhythm(4),\n  margin: `0 ${rhythm(1)}`,\n  [`@media (min-width: ${responsive.tablet.minWidth}px)`]: {\n    width: '86%',\n    margin: '0 auto',\n  },\n})\n\nconst Html = styled.div({\n  paddingBottom: rhythm(2),\n  h2: {\n    fontWeight: 'bold',\n    fontSize: scale(1 / 2).fontSize,\n    lineHeight: rhythm(2),\n    margin: `${rhythm(3 / 2)} 0`,\n  },\n  h3: {\n    fontWeight: 'bold',\n    fontSize: scale(1 / 6).fontSize,\n    lineHeight: rhythm(2),\n    margin: `${rhythm(1)} 0`,\n  },\n  li: {\n    fontSize: scale(0).fontSize,\n    lineHeight: rhythm(1),\n  },\n  ul: {\n    listStyle: 'disc',\n    listStylePosition: 'inside',\n  },\n  ol: {\n    listStylePosition: 'inside',\n  },\n  tr: {\n    fontSize: scale(0).fontSize,\n    lineHeight: rhythm(1),\n  },\n  [`@media (min-width: ${responsive.tablet.minWidth}px)`]: {\n    li: {\n      lineHeight: rhythm(3 / 2),\n    },\n    tr: {\n      lineHeight: rhythm(3 / 2),\n    },\n  },\n})\n\nexport default BlogPage\n","import * as React from 'react'\nimport {graphql} from 'gatsby'\n\nimport App from '../components/organisms/app'\nimport Content from '../components/organisms/content'\nimport Seo from '../components/atoms/seo'\nimport BlogPage from '../components/organisms/blogPage'\nimport {PostTemplateQuery} from '../../types/graphql-types'\n\ntype Props = {\n  data: PostTemplateQuery\n}\n\nconst Post: React.FC<Props> = ({data}) => {\n  const fm = data.markdown.frontmatter\n  const url = `${data.site.siteMetadata.siteUrl}${fm.slug}`\n  const imageUrl = `${data.site.siteMetadata.siteUrl}${fm.thumbnail.publicURL}`\n\n  return (\n    <App>\n      <Seo\n        isPostPage\n        title={fm.title}\n        description={fm.description}\n        url={url}\n        imageUrl={imageUrl}\n      />\n      <Content>\n        <BlogPage\n          title={fm.title}\n          date={fm.date}\n          description={fm.description}\n          slug={fm.slug}\n          thumbnail={fm.thumbnail.name}\n          tags={fm.tags}\n          html={data.markdown.html}\n          toc={data.markdown.toc}\n        />\n      </Content>\n    </App>\n  )\n}\n\nexport const query = graphql`\n  query PostTemplate($slug: String!) {\n    markdown: markdownRemark(frontmatter: {slug: {eq: $slug}}) {\n      frontmatter {\n        slug\n        date(formatString: \"YYYY.MM.DD\")\n        tags\n        title\n        description\n        thumbnail {\n          name\n          publicURL\n        }\n      }\n      html\n      toc: tableOfContents(pathToSlugField: \"frontmatter.slug\")\n    }\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n\nexport default Post\n"],"sourceRoot":""}