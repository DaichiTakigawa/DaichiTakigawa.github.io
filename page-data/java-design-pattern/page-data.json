{"componentChunkName":"component---src-templates-post-template-tsx","path":"/java-design-pattern/","result":{"data":{"markdown":{"frontmatter":{"slug":"/java-design-pattern/","date":"2020.08.11","tags":["Java","Memo"],"title":"GoFのデザインパターンまとめ","description":"今まで断片的に知っていたデザインパターンを改めて勉強し直したのでそのまとめです。","thumbnail":{"name":"java-thumbnail","publicURL":"/static/42c66405c58b0da6bbbc1dc25ddd416b/java-thumbnail.png"}},"html":"<h2 id=\"23個のデザインパターン\" style=\"position:relative;\"><a href=\"#23%E5%80%8B%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\" aria-label=\"23個のデザインパターン permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23個のデザインパターン</h2>\n<h3 id=\"1-生成に関するパターン\" style=\"position:relative;\"><a href=\"#1-%E7%94%9F%E6%88%90%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\" aria-label=\"1 生成に関するパターン permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 生成に関するパターン</h3>\n<ul>\n<li>Abstract Factory<br>\n抽象的な部品から抽象的な製品を作成する、抽象的な工場のパターン。<br>\nある製品の製造過程を抽象化するイメージ。<br>\nあらかじめ、工場、部品、完成品に対応する抽象クラスを作成しておき、<br>\nそれらすべての抽象クラスを継承した工場、部品を使って具体的な完成品を作成する。</li>\n<li>Builder<br>\nインスタンスの初期化をカプセル化するパターン。<br>\nBuilderインスタンスは初期化したいインスタンスをフィールドに持ち、<br>\n外部からBuilderインスタンスのメソッド経由でインスタンスの初期化を行う。<br>\n比較的よく目にするパターン。</li>\n<li>Factory Method<br>\nインスタンスの生成が外部の状態に依存していたり、<br>\n生成が外部の状態を変化させる時に便利なパターン。<br>\nFactoryクラス内で状態を管理しておき、<br>\nFactory Method経由でインスタンスを生成するようにする。</li>\n<li>Prototype<br>\nインスタンスをコピーして新しいインスタンスを作成するパターン。<br>\n一つのクラスから多様なインスタンスを繰り返し生成する時や、<br>\nインスタンスの生成をプログラム的に行うのが困難な時に利用できる。</li>\n<li>Singleton<br>\nプログラム全体を通じて、インスタンスが一つしか生成されないように制限するパターン。<br>\nよく目にする。</li>\n</ul>\n<h3 id=\"2-構造に関するパターン\" style=\"position:relative;\"><a href=\"#2-%E6%A7%8B%E9%80%A0%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\" aria-label=\"2 構造に関するパターン permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 構造に関するパターン</h3>\n<ul>\n<li>Adapter<br>\nデータを供給するクラスと、消費するクラスの橋渡しをするパターン。<br>\nAdapterパターンはさらに、継承のパターンと委譲のパターンの二つに分けられる。<br>\n継承のパターンではAdapterクラスがデータ供給クラスと消費側に向けたのインターフェースの二つを継承する。<br>\n委譲のパターンでは、Adapterクラスは消費側に向けたインターフェースを継承し、データ供給インスタンスをメンバ変数として保持。データの取得は委譲を利用して行うというパターン。<br>\nAndroidでいうとRecyclerViewのAdapterは譲渡のAdapterパターンといえる。</li>\n<li>Bridge<br>\nクラスの継承ツリーを、機能の分岐先と実装の分岐先に分けるパターン。<br>\nあるクラスから抽象化したい処理を別の新しいクラスに抽出、委譲することで、<br>\n機能を追加したいときは元のクラスを継承、抽象化された処理を実装したい時は、<br>\n別の新しいクラスを継承することで、継承ツリー内で機能の階層と実装の階層を<br>\n分けることができる。</li>\n<li>Composite<br>\n容器と中身を同一視するパターン。<br>\n主にツリー構造のデータに対して、中間のノードと葉のノードを区別せずに扱いたい時に利用する。<br>\nAndroidでいうとViewとViewGroupがこのパターン。<br>\nViewGroupはViewを継承しているが、Viewのリストを保持している。</li>\n<li>Decorator<br>\n中身と装飾を同一視するパターン。<br>\nあるクラスに対して、再帰的に機能を追加でき、かつ機能を追加しても同じインターフェース越しに利用できるようなパターン。<br>\njava.io.*ライブラリがこのパターンを利用しているらしい。<br>\nFileReaderやInputStreamReader、BufferedReaderなどを入れ子状にして機能を追加していくことができる？。(あまりちゃんと確認していない。)</li>\n<li>Facade<br>\n複数のクラス間の連携をまとめて、シンプルなインターフェースを提供するパターン。<br>\n特に意識しなくても、複数のクラス間の連携が複雑になっていけば自然とまとめるようにらると思う。</li>\n<li>Flyweight<br>\nインスタンスをプールして使いまわしてメモリを節約するパターン。</li>\n<li>Proxy<br>\nProxyクラス越しにインスタンスを操作することで、制限をかけたり実際の複雑な処理をブラックボックス化したりするパターン。<br>\nAndroidではbinderという分散オブジェクトの仕組みを利用して、別プロセスのインスタンスのメソッドを呼び出したりするが、それがProxyパターンになっているらしい。</li>\n</ul>\n<h3 id=\"3-振る舞いに関するパターン\" style=\"position:relative;\"><a href=\"#3-%E6%8C%AF%E3%82%8B%E8%88%9E%E3%81%84%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\" aria-label=\"3 振る舞いに関するパターン permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 振る舞いに関するパターン</h3>\n<ul>\n<li>Chain of Responsibility<br>\n問題をたらい回しにして、処理できる人に処理させるパターン。<br>\nあまり使わなさそう。</li>\n<li>Command<br>\n操作をオブジェクトにすることで、UndoやRedoなどの処理を行えるようにするパターン。<br>\n各Commandオブジェクトはexecuteメソッドを持ち、これらをMacroCommandオブジェクトが取りまとめる。</li>\n<li>Interpreter<br>\n構文解析木を作成するパターン。<br>\n各Nodeオブジェクトはparseメソッドを持ち、contextクラスからトークンを一つ一つ取得しながら構文解析木を作成する。</li>\n<li>Iterator<br>\nリストに対してループ処理を行えるようにするパターン。<br>\nhasNextとnextメソッドを実装したIteratorクラスから、要素を一つ一つ取り出していく。</li>\n<li>Meditator<br>\n複数のクラス間の連携を取りまとめるパターン。<br>\nFacadeが内部の複数のクラスを一方的に利用するのに対し、<br>\nMeditatorでは、Meditatorクラスと内部のクラスが双方向に連携する。<br>\nAndroidだと、TabLayoutとViewPager2を連携するLabLayoutMeditatorがこのパターンに相当する。</li>\n<li>Memento<br>\nインスタンスの状態を保存して、再生成するパターン。<br>\nAndroidだと、BundleとかParcelableとかがこのパターンに相当する。</li>\n<li>Observer<br>\nリスナーを登録して、イベントの通知を監視するパターン。<br>\nAndroidだと、LiveDataがこのパターンに相当する。</li>\n<li>State<br>\nロジックが複数の状態によって切り替わるときに、状態に相当するクラスを作成し、<br>\nそのクラスの中にロジックを閉じ込めるパターン。<br>\nstateインスタンスを差し替えるだけで、ロジックの切り替えができるので、<br>\nif文が少なくなり、新しい状態が発生しても対応するクラスを作成するだけで対応できる。  </li>\n<li>Strategy<br>\nロジックを担当するクラスに特定の処理を委譲するパターン。<br>\n委譲に関する一番ベーシックなパターンのような気がする。<br>\nStateもObserverもBridgeもこのパターンの一種なような気がする。</li>\n<li>Template Method<br>\n特定の処理を抽象化して、継承する子クラスに実装を任せるパターン。<br>\n継承に関する一般的なパターンのような気がする。<br>\nabstract classは須らくこのパターンに当てはまると思う。</li>\n<li>Visitor<br>\nVisitorクラスがデーター構造(大抵の場合はツリー構造)の各ノードを渡り歩くパターン。<br>\nVisitorクラスはそれぞれのNodeクラスに対する処理を記述したメソッドを持つ。<br>\n各ノードはacceptメソッドを実装し、引数としてVisitorクラスを受け取る。<br>\nNodeクラスはacceptメソッド内部で、自分に対応するVisitorクラスのメソッドを自分を引数として呼び出す。</li>\n</ul>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>デザインパターンと言いつつも、StrategyやTmeplate Methodなど普段からあまり意識せずに使っているパターンもありました。<br>\nBridgeやStateパターンは、結構いろいろな場面で利用でき、可読性やメンテナンス性も高まるので普段から意識して使うようにしていきたいです。</p>","toc":"<ul>\n<li>\n<p><a href=\"/java-design-pattern/#23%E5%80%8B%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">23個のデザインパターン</a></p>\n<ul>\n<li><a href=\"/java-design-pattern/#1-%E7%94%9F%E6%88%90%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">1. 生成に関するパターン</a></li>\n<li><a href=\"/java-design-pattern/#2-%E6%A7%8B%E9%80%A0%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">2. 構造に関するパターン</a></li>\n<li><a href=\"/java-design-pattern/#3-%E6%8C%AF%E3%82%8B%E8%88%9E%E3%81%84%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">3. 振る舞いに関するパターン</a></li>\n</ul>\n</li>\n<li><a href=\"/java-design-pattern/#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>"},"site":{"siteMetadata":{"siteUrl":"https://www.takigawa-memo.com"}}},"pageContext":{"slug":"/java-design-pattern/"}},"staticQueryHashes":["112949366","706912905"]}