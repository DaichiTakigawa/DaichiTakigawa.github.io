{"componentChunkName":"component---src-templates-post-template-tsx","path":"/pytorch-android-ssd/","result":{"data":{"markdown":{"frontmatter":{"slug":"/pytorch-android-ssd/","date":"2021.07.25","tags":["Android","PyTorch"],"title":"PyTorch Mobileを使ってAndroidでSSDを用いた物体検出をしてみた","description":"PyTorchで学習したモデルをMobileデバイスにシームレスにデプロイ出来るPyTorch Mobileを用いて、COCOデータセットで事前学習された物体検出モデルSSD300をAndroid上で動かしてみました。","thumbnail":{"name":"pytorch-android-thumbnail","publicURL":"/static/b34583603e89c7cfcfbd46d355e2b9ef/pytorch-android-thumbnail.png"}},"html":"<h2 id=\"これは何\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%82%8C%E3%81%AF%E4%BD%95\" aria-label=\"これは何 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>これは何</h2>\n<p>PyTorchで学習したモデルをiOSやAndroid等のモバイルデバイスにシームレスにデプロイできるフレームワークとしてPyTorch Mobileがあります。<br>\nTensorflow liteよりも後発で、比較するとまだ情報も少ない感じがしますが、公式リポジトリにて画像認識や物体検出、セグメンテーション、翻訳、音声認識などのデモアプリが公開されています。<br>\n物体検出タスクとしては、Faster-RCNNとYOLOv5の2つを用いたデモが公開されおり、せっかくならSSDを使った物体検出も試してみたいと思ったので、COCOデータセットで事前学習されたSSD300のモデルをgithubから持ってきてTorchScriptに変換し、PyTorch Mobileを使ってAndroid上で動かしてみました。<br>\n今回は、モデルをTorchScriptに変換するときに躓いた点や、公式のデモのFaster-RCNNやYOLOv5との簡単な比較結果をまとめています。<br>\n何か勘違いしている点や至らない点がありましたら指摘していただけると幸いです。</p>\n<p>ソースコードはこちらにあげています。<br>\n<a href=\"https://github.com/DaichiTakigawa/pytorch-android-ssd\">DaichiTakigawa/pytorch-android-ssd</a></p>\n<h2 id=\"モデルをtorchscriptに変換\" style=\"position:relative;\"><a href=\"#%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92torchscript%E3%81%AB%E5%A4%89%E6%8F%9B\" aria-label=\"モデルをtorchscriptに変換 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>モデルをTorchScriptに変換</h2>\n<p>こちらのモデルを使いました。<br>\n<a href=\"https://github.com/NVIDIA/DeepLearningExamples/tree/master/PyTorch/Detection\">DeepLearningExamples/PyTorch/Detection at master · NVIDIA/DeepLearningExamples</a></p>\n<p>バックボーンとしてResNet50を採用しています。  </p>\n<p>そのまま、torch.jit.scirptでTorchScriptに変換しようとしても上手くいかなかったので、いくつか変更を加えました。<br>\n基本的には、引数の型を上手く推論できていない箇所に型ヒントを付けたり、itertoolsを使ったforループを単純なforループに変更したり、numpyを使った処理をtorchに置き換えたりということをしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 型が情報が無いとtorch.Tensor型とみなされてしまうことがあるので、</span>\n<span class=\"token comment\"># 型ヒントを付加する。</span>\n<span class=\"token operator\">-</span>   <span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> bboxes_in<span class=\"token punctuation\">,</span> labels_in<span class=\"token punctuation\">,</span> criteria <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token operator\">+</span>   <span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> bboxes_in<span class=\"token punctuation\">,</span> labels_in<span class=\"token punctuation\">,</span> criteria<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 単純なforループに直す</span>\n<span class=\"token operator\">-</span>   <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>sfeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token operator\">+</span>   <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>sfeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">+</span>       <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>sfeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># numpyの関数は使えないのでtorchの関数で代用する</span>\n<span class=\"token operator\">-</span>   best <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argwhere<span class=\"token punctuation\">(</span>confidences <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">+</span>   best <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>confidences <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># nn.ModuleListはzipやenumerateでイテレート出来ない。</span>\n<span class=\"token comment\"># srcはTensor、locとconfはnn.ModuleList</span>\n<span class=\"token operator\">-</span>   <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span>       ret<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n            c<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>label_num<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">+</span>       locs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span>       i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token operator\">+</span>       <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> loc<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">+</span>           s <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span>           locs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>           i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"デモ\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%A2\" aria-label=\"デモ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デモ</h2>\n<p>TorchScriptをAndroid上で動かす場合、CPU上で計算するか、Vulkanを使ってGPU上で動かすか、Google NNAPIを使ってDSPやNPU上で動かすかの3つの選択肢あるそうです。</p>\n<p>Google NNAPIを使った方法は、まだプロトタイプ段階で一部のテンソル操作しかサポートしていなく、Vulkanを使ってGPU上で動かす方法も、ランタイムをソースコードからコンパイルし直す必要があり、自分の環境では謎のエラーが出て結局解決できなかったので、今回はとりあえずCPU上で計算しています。</p>\n<p><video controls loop src=\"/4d27eb3b12b649db67af859442b59ca6/ssd.mp4\" type=\"video/mp4\" width=\"320px\" ></video></p>\n<h2 id=\"比較\" style=\"position:relative;\"><a href=\"#%E6%AF%94%E8%BC%83\" aria-label=\"比較 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比較</h2>\n<p>公式のデモで実装されていた、Faster-RCNNのモデルとYOLOv5との簡単な比較をしてみました。</p>\n<p>公式のデモのFaster-RCNNは、特徴量抽出層にFBNetを採用しているみたいです。<br>\nFBNetについて、ちゃんと理解していないのですが、モデルの学習時の損失関数にモバイルデバイスでの推論時のレイテンシが組み込まれており、各OSやデバイスに最適化されたモデルを生成することが可能だそうです[4]。</p>\n<p>YOLOv5にもいくつかバリエーションがあるようですが、デモでは一番サイズが小さく推論時間が短いYOLOv5sモデルが使われているみたいでした。</p>\n<p>Google Pixe 3aの実機上で動かしています。  </p>\n<table>\n<thead>\n<tr>\n<th>モデル</th>\n<th>Faster-RCNN(FBNetV3A)</th>\n<th>YOLOv5s</th>\n<th>SSD300(ResNet50)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inference time (ms)</td>\n<td>164.1</td>\n<td>1308.1</td>\n<td>2018.7</td>\n</tr>\n<tr>\n<td>fps</td>\n<td>6.1</td>\n<td>0.76</td>\n<td>0.45</td>\n</tr>\n<tr>\n<td>デモ</td>\n<td><video controls loop src=\"/87a4ef00fce2e1c614173604ac4d11f7/d2go.mp4\" type=\"video/mp4\" width=\"200px\"></video></td>\n<td><video controls loop src=\"/6ca5f3dc8e9ae7ccc0ee06082b7314a5/yolov5.mp4\" type=\"video/mp4\" width=\"200px\"></video></td>\n<td><video controls loop src=\"/4d27eb3b12b649db67af859442b59ca6/ssd.mp4\" type=\"video/mp4\" width=\"200px\"></video></td>\n</tr>\n</tbody>\n</table>\n<p>Faster-RCNNがモバイルに最適化されているということもあって、めっちゃサクサク動いています。<br>\nただ、他の二つの手法の方が推論の精度は高いような気がします。</p>\n<h2 id=\"参考リンク\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\" aria-label=\"参考リンク permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考リンク</h2>\n<ol>\n<li><a href=\"https://github.com/pytorch/android-demo-app\">pytorch/android-demo-app: PyTorch android examples of usage in applications</a></li>\n<li><a href=\"https://pytorch.org/tutorials/recipes/mobile_perf.html\">Pytorch Mobile Performance Recipes — PyTorch Tutorials 1.9.0+cu102 documentation</a></li>\n<li><a href=\"https://medium.com/pytorch/pytorch-mobile-now-supports-android-nnapi-e2a2aeb74534\">PyTorch Mobile Now Supports Android NNAPI | by PyTorch | PyTorch | Medium</a></li>\n<li><a href=\"https://qiita.com/cvusk/items/e7c9bb30c801996cd973\">Neural Architecture Searchの新潮流 〜DARTSとFBNetの衝撃〜 - Qiita</a></li>\n</ol>","toc":"<ul>\n<li><a href=\"/pytorch-android-ssd/#%E3%81%93%E3%82%8C%E3%81%AF%E4%BD%95\">これは何</a></li>\n<li><a href=\"/pytorch-android-ssd/#%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92torchscript%E3%81%AB%E5%A4%89%E6%8F%9B\">モデルをTorchScriptに変換</a></li>\n<li><a href=\"/pytorch-android-ssd/#%E3%83%87%E3%83%A2\">デモ</a></li>\n<li><a href=\"/pytorch-android-ssd/#%E6%AF%94%E8%BC%83\">比較</a></li>\n<li><a href=\"/pytorch-android-ssd/#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\">参考リンク</a></li>\n</ul>"},"site":{"siteMetadata":{"siteUrl":"https://www.takigawa-memo.com"}}},"pageContext":{"slug":"/pytorch-android-ssd/"}},"staticQueryHashes":["112949366","706912905"]}