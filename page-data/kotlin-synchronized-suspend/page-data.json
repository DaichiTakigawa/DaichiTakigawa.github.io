{"componentChunkName":"component---src-templates-post-template-tsx","path":"/kotlin-synchronized-suspend/","result":{"data":{"markdown":{"frontmatter":{"slug":"/kotlin-synchronized-suspend/","date":"2020.08.26","tags":["Kotlin","Android"],"title":"なぜKotlinでsynchronized suspendは機能しないのか","description":"Androidで排他制御をかけようとした際に、suspend関数にsyncrhonizedアノテーションを付与してもうまく作動しなかったので原因と解決方法をまとめました。","thumbnail":{"name":"kotlin-thumbnail","publicURL":"/static/cb594d8c05074df1a7067afe2abacee9/kotlin-thumbnail.png"}},"html":"<h2 id=\"なにが問題なのか\" style=\"position:relative;\"><a href=\"#%E3%81%AA%E3%81%AB%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%AA%E3%81%AE%E3%81%8B\" aria-label=\"なにが問題なのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なにが問題なのか</h2>\n<p>まずは以下のコードを見て頂きたいです。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>Dispatchers\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>delay\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>launch\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>runBlocking\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> enter critical section.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// do something critical</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> exit critical section.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span>\n        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> thread name: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>main関数内でcoroutineを2つ作成し、doSomething関数を非同期に呼び出しています。<br>\n実行結果は以下のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#0 thread name: DefaultDispatcher-worker-1\n#1 thread name: DefaultDispatcher-worker-2\n#0 enter critical section.\n#1 enter critical section.\n#1 exit critical section.\n#0 exit critical section.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>どのコルーチンで実行されたか分かるように先頭にラベルを出力しています。<br>\n特に排他制御をかけていないので、criticalセクションが同時に二つ走ってしまっていることが分かります。</p>\n<p>suspend関数に@Synchronizedアノテーションをつけて排他制御を試みてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>Dispatchers\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>delay\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>launch\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>runBlocking\n\n<span class=\"token annotation builtin\">@Synchronized</span>\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> enter critical section.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> exit critical section.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span>\n        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> thread name: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#0 thread name: DefaultDispatcher-worker-2\n#0 enter critical section.\n#1 thread name: DefaultDispatcher-worker-1\n#1 enter critical section.\n#0 exit critical section.\n#1 exit critical section.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Sychronizedアノテーションがついているにも関わらず、criticalセクションに入っているthreadが同時に2つ存在しています。</p>\n<p>suspend関数にSyncrhonizedアノテーションをつけても無視されるのか？と思い、suspend関数内部でsyncrhonized関数を用いて排他制御をかけようと試みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>Dispatchers\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>delay\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>launch\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>runBlocking\n\n<span class=\"token keyword\">val</span> LOCK <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span>LOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> enter critical section.\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// do something</span>\n        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;- The 'delay' suspension point is inside a critical section</span>\n\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> exit critical section.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span>\n        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> thread name: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>今度は \"The 'delay' suspension point is inside a critical section\" というメッセージが出力されてコンパイルエラーになります。</p>\n<h2 id=\"解決方法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\" aria-label=\"解決方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方法</h2>\n<p>まず先に解決方法を提示し、そのあとなぜうまく作動しなかったか解説していきたいと思います。</p>\n<p>suspend関数内で排他制御をかけたい時はMutexを用います。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>Dispatchers\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>delay\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>launch\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>runBlocking\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>sync<span class=\"token punctuation\">.</span>withLock\n\n<span class=\"token keyword\">val</span> mutex <span class=\"token operator\">=</span> <span class=\"token function\">Mutex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mutex<span class=\"token punctuation\">.</span><span class=\"token function\">withLock</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> enter critical section.\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// do something</span>\n        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> \n\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> exit critical section.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span>\n        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> thread name: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>実行結果。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#0 thread name: DefaultDispatcher-worker-1\n#1 thread name: DefaultDispatcher-worker-2\n#1 enter critical section.\n#1 exit critical section.\n#0 enter critical section.\n#0 exit critical section.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ちゃんとcriticalセクションに入れるthreadが一つに制限されています。</p>\n<h2 id=\"suspend関数はどのようにコンパイルされるのか\" style=\"position:relative;\"><a href=\"#suspend%E9%96%A2%E6%95%B0%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%95%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B\" aria-label=\"suspend関数はどのようにコンパイルされるのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>suspend関数はどのようにコンパイルされるのか</h2>\n<p>なぜSynchronizedアノテーションをつけたsuspend関数では排他制御がうまく機能しなかったのでしょうか。</p>\n<p>どうやらそれはsuspend関数がどのようにバイトコードにコンパイルされるかと関係しているようです。<br>\nsuspend関数は一見するとすごく特別な関数のように見えますが、コンパイルされるタイミングではもちろん通常の関数に変換されます。</p>\n<p>以下はAPIサーバーからtokenを取得して、postを投げる疑似コードです。<br>\nこのコードを用いてsuspend関数がどのようにコンパイルされるのか簡単に見ていきましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get token from api</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"token\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Post <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create post</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do post</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> token <span class=\"token operator\">=</span> <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> post <span class=\"token operator\">=</span> <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>まず、このコードをsuspend関数を使わないで書こうとすると以下のようになるかと思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get token from api</span>\n    <span class=\"token comment\">// 実際は多分こんな感じになる。</span>\n    <span class=\"token comment\">// service.getToken(username, password, object : ResponseCallback {</span>\n    <span class=\"token comment\">//      override fun onSuccess(response: Response) {</span>\n    <span class=\"token comment\">//          val token = getToken(response)</span>\n    <span class=\"token comment\">//          callback(token)</span>\n    <span class=\"token comment\">//      }</span>\n    <span class=\"token comment\">// })</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create post</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do post</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    requestToken <span class=\"token punctuation\">{</span> token <span class=\"token operator\">-></span>\n        <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> post <span class=\"token operator\">-></span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ネットワークアクセスや重たい処理はバックグラウンドで行い、結果が返ってきたタイミングでcallbackをよぶスタイルです。<br>\nこれを継続渡しスタイル(CPS: Continuation-passing style)と呼ぶらしいです。<br>\nなんてことはないただのcallbackです。</p>\n<p>suspend関数もコンパイル時には上記のようにCPSに変換されてコンパイルされます。<br>\nしかし上記のコードとは少し異なるものとなります。</p>\n<p>まず、suspend関数のシグニチャがどのように変換されるか見てみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// kotlin</span>\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Post <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Java/JVM</span>\nObject <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>String token<span class=\"token punctuation\">,</span> Item item<span class=\"token punctuation\">,</span> Continuation<span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">></span> cont<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>すべてのsuspend関数は上記のように新しくCoutinueation型の引数を受け取るようになります。<br>\nこのContinuation&#x3C;Post>はcallbackに相当します。Continuationはkotlinのライブラリで定義されているintarfaceです。中身を見てみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Continuation<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> CoroutineContext\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">resumeWithException</span><span class=\"token punctuation\">(</span>exception<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>CoroutineContext(どのthreadで実行されるか等の情報を持つ)とコールバックを二つ持ちます。<br>\nここまでは、上記の手作業でcallbackスタイルに直した場合と基本的には同じことが起きています。</p>\n<p>しかし、postItem関数の処理部分がどのように変換されるか観察すると少しずつ違いが出てきます。  </p>\n<p>以下、postItem関数の内部のコードがどのように変換されるかステップごとに見ていきましょう。  </p>\n<p>まずpostItem関数の内部コード全体は巨大なswitch文となり、すべてのsuspendポイントにラベルが張られます。<br>\npostItem関数はsuspendポイントに到達するたびにreturnし、適当なタイミングでまた呼び出されます。<br>\nイメージとしては以下のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">val</span> token <span class=\"token operator\">=</span> <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">val</span> post <span class=\"token operator\">=</span> <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>しかし、これだとtokenやpostなどの変数を次の呼び出しで利用することができないので、関数内部の実行状態を保存するためのobjectを生成します。<br>\nこのobjectは先ほど出てきたContinueationを実装したものです。state machineと呼ぶらしいです。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ContinueImpl <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">val</span> token <span class=\"token operator\">=</span> <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">val</span> post <span class=\"token operator\">=</span> <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>先ほど話に上がったようににすべてのsuspend関数はContinuationを引数に受け取る通常の関数に変換されます。<br>\n内部で呼び出すsuspend関数にはこの作成したstate machineが渡されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> Continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ContinueImpl <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>どこまで実行したかのlabelや内部状態などをこのstate machineに保存するようにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> Continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ContinueImpl <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            sm<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> item\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// &lt;- 次に実行するラベル</span>\n            <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ContinueImplはContinuationを継承しているのでresumeを実装しています。<br>\nContineuImplのresume関数内部では自身を引数にしてpostItemが呼び直されます。<br>\nrequestToken関数ではすべての処理が終わったタイミングで、このstate machineにtokenを格納し、resume関数を呼ぶことになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> Continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ContinueImpl <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">fun</span> <span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">postIem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            sm<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> item\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>今のままだと内部状態が常に上書きされてしまうので修正します。<br>\nContineuImplをこのsuspend関数独自のThisSMという型に変更します。<br>\n引数に渡されたcontinuationがThisSM型でない場合だけインスタンスを生成します。<br>\nこうすることで、postItem関数が内部で生成したstate machineのresume経由で呼び出されたときは、前の状態を引き継ぐことができます。<br>\nそしてcase 1ブロック内ではstate machineからitemやtokenなどを受け取ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> Continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> cont <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> ThisSM <span class=\"token operator\">?:</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ThisSM <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">fun</span> <span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">postIem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            sm<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> item\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">val</span> item <span class=\"token operator\">=</span> sm<span class=\"token punctuation\">.</span>item\n            <span class=\"token keyword\">val</span> token <span class=\"token operator\">=</span> sm<span class=\"token punctuation\">.</span>result <span class=\"token keyword\">as</span> String\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n            <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>解説動画にはなかったのですが、おそらく、すべての処理が終了したら、最初に渡されていたcontinuationのresumeを呼び出す実装になっているのかと思います。(間違っていったらご指摘いただけると幸いです)</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> Continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> cont <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> ThisSM <span class=\"token operator\">?:</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ThisSM <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">val</span> initialCont <span class=\"token operator\">=</span> cont\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">postIem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            sm<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> item\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token function\">requestToken</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">val</span> item <span class=\"token operator\">=</span> sm<span class=\"token punctuation\">.</span>item\n            <span class=\"token keyword\">val</span> token <span class=\"token operator\">=</span> sm<span class=\"token punctuation\">.</span>result <span class=\"token keyword\">as</span> String\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n            <span class=\"token function\">createPost</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">processPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n            sm<span class=\"token punctuation\">.</span>initialCont<span class=\"token punctuation\">.</span><span class=\"token function\">reusme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これでsuspend関数を通常の関数に変換することができました。</p>\n<h2 id=\"なぜ作動しなかったのか\" style=\"position:relative;\"><a href=\"#%E3%81%AA%E3%81%9C%E4%BD%9C%E5%8B%95%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B\" aria-label=\"なぜ作動しなかったのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なぜ作動しなかったのか</h2>\n<p>suspend関数がどのようにコンパイルされるか大体のイメージがつかめると、最初のコードがなぜうまく作動しなかったのか理解できます。</p>\n<p>最初のコードを再掲します。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Synchronized</span>\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> enter critical section.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> exit critical section.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>このコードはコンパイルされる時に以下のようにに変換されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">// イメージ</span>\n<span class=\"token annotation builtin\">@Synchronized</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> Continuation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> sm <span class=\"token operator\">=</span> cont <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> ThisSM <span class=\"token operator\">?:</span> ThisSM <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">switch</span> <span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        case <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> enter critical section.\"</span><span class=\"token punctuation\">)</span>\n\n            sm<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        case <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#<span class=\"token interpolation variable\">$i</span> exit critical section.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>delayを呼び出したあと、doSomething関数が一度returnするタイミングでオブジェクトのlockが外れています。</p>\n<p>従ってdelay関数が呼び出されreturnした後、またdoSomething関数が呼び出されるまでの間は、別のcoroutineで呼び出されたdoSomething関数がlockを獲得することができます。</p>\n<p>これが原因であたかもcriticalセクションを実行しているthreadが複数存在しているように見えたのでした。</p>\n<h2 id=\"参考リンク\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\" aria-label=\"参考リンク permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考リンク</h2>\n<ul>\n<li><a href=\"https://blog.danlew.net/2020/01/28/coroutines-and-java-synchronization-dont-mix/\">Coroutines and Java Synchronization Don't Mix</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=YrrUCSi72E8\">KotlinConf 2017 - Deep Dive into Coroutines on JVM by Roman Elizarov</a></li>\n</ul>","toc":"<ul>\n<li><a href=\"/kotlin-synchronized-suspend/#%E3%81%AA%E3%81%AB%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%AA%E3%81%AE%E3%81%8B\">なにが問題なのか</a></li>\n<li><a href=\"/kotlin-synchronized-suspend/#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\">解決方法</a></li>\n<li><a href=\"/kotlin-synchronized-suspend/#suspend%E9%96%A2%E6%95%B0%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%95%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B\">suspend関数はどのようにコンパイルされるのか</a></li>\n<li><a href=\"/kotlin-synchronized-suspend/#%E3%81%AA%E3%81%9C%E4%BD%9C%E5%8B%95%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B\">なぜ作動しなかったのか</a></li>\n<li><a href=\"/kotlin-synchronized-suspend/#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\">参考リンク</a></li>\n</ul>"},"site":{"siteMetadata":{"siteUrl":"https://www.takigawa-memo.com"}}},"pageContext":{"slug":"/kotlin-synchronized-suspend/"}},"staticQueryHashes":["112949366","706912905"]}